[
  {
    "name": "Basic LLM Chain",
    "type": "@n8n/n8n-nodes-langchain.chainLlm",
    "typeVersion": 1.6,
    "position": [220, 0],
    "parameters": {
      "promptType": "define",
      "text": "={{ $json }}",
      "hasOutputParser": true,
      "messages": {
        "messageValues": [
          {
            "message": "Prompt"
          }
        ]
      }
    },
    "description": "Узел Basic LLM Chain предназначен для обработки входных данных с помощью языковой модели (LLM), такой как GPT-3 или GPT-4. Языковая модель — это тип искусственного интеллекта, который может генерировать текст на основе заданного промпта.\n\nПараметры:\n\n1. **promptType**: Определяет тип промпта. Значение 'define' позволяет явно задать промпт в поле 'text'. Другие возможные значения могут включать 'template' для использования шаблонов промптов.\n\n2. **text**: Содержит текст промпта, который будет отправлен в языковую модель. В данном случае используется выражение `{{ $json }}`, что означает, что весь входной JSON будет использован как промпт. Это позволяет динамически формировать промпт на основе входных данных.\n\n3. **hasOutputParser**: Включен (true), что означает, что ответ модели будет обработан с помощью output parser. Output parser позволяет структурировать ответ модели, например, извлекать определенные поля или форматировать данные в нужный вид.\n\n4. **messages**: Содержит массив сообщений, которые задают контекст для модели. В данном случае есть одно сообщение 'Prompt', которое, вероятно, используется для указания начала диалога или задания начального контекста.\n\nПример использования: Этот узел можно использовать для генерации текста на основе входных данных, например, для создания описаний продуктов, ответов на вопросы или генерации кода. Входные данные могут содержать информацию, которую модель должна использовать для генерации ответа."
  },
  {
    "name": "Supabase",
    "type": "n8n-nodes-base.supabase",
    "typeVersion": 1,
    "position": [1600, 140],
    "parameters": {
      "operation": "get",
      "tableId": "nodes",
      "filters": {
        "conditions": [
          {
            "keyName": "workflow_id",
            "keyValue": "4"
          }
        ]
      }
    },
    "credentials": {
      "supabaseApi": {
        "id": "wqQObseELVakgRgb",
        "name": "Avainovator"
      }
    },
    "description": "Узел Supabase позволяет взаимодействовать с базой данных Supabase, которая является открытой альтернативой Firebase. Supabase предоставляет RESTful API для работы с данными.\n\nПараметры:\n\n1. **operation**: Определяет тип операции. Значение 'get' используется для извлечения записей из таблицы. Другие возможные операции могут включать 'insert', 'update', 'delete' и т.д.\n\n2. **tableId**: Указывает имя таблицы в базе данных Supabase, из которой нужно извлечь данные. В данном случае это 'nodes'.\n\n3. **filters**: Позволяет задать условия для фильтрации записей. В примере используется фильтр, где поле 'workflow_id' равно '4'. Это означает, что будут извлечены только те записи, у которых workflow_id = 4.\n\nДля использования этого узла необходимо, чтобы в базе данных Supabase была создана таблица 'nodes' с полем 'workflow_id'. Также требуется настроить учетные данные для доступа к Supabase API.\n\nПример использования: Этот узел можно использовать для получения списка узлов, связанных с определенным рабочим процессом, идентифицируемым по 'workflow_id'."
  },
  {
    "name": "Supabase Vector Store",
    "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
    "typeVersion": 1.1,
    "position": [680, 0],
    "parameters": {
      "mode": "load",
      "tableName": {
        "__rl": true,
        "value": "nodesrules",
        "mode": "list",
        "cachedResultName": "nodesrules"
      },
      "prompt": "={{ $json }}",
      "options": {
        "queryName": "match_nodesrules"
      }
    },
    "credentials": {
      "supabaseApi": {
        "id": "wqQObseELVakgRgb",
        "name": "Avainovator"
      }
    },
    "description": "Узел Supabase Vector Store предназначен для работы с векторными данными в Supabase, используя pgvector — расширение PostgreSQL для хранения и поиска векторов.\n\nПараметры:\n\n1. **mode**: Определяет режим работы. Значение 'load' используется для загрузки векторных данных из таблицы.\n\n2. **tableName**: Указывает имя таблицы в Supabase, которая содержит векторные данные. В данном случае это 'nodesrules'. Таблица должна быть настроена с поддержкой pgvector, что позволяет хранить векторы и выполнять над ними операции, такие как поиск по сходству.\n\n3. **prompt**: Использует входные данные в формате JSON (`{{ $json }}`) для формирования запроса или фильтрации данных.\n\n4. **options.queryName**: Задает имя предопределенного запроса для поиска векторов. В примере это 'match_nodesrules', что, вероятно, является именем функции или процедуры в базе данных для выполнения поиска.\n\nДля использования этого узла необходимо, чтобы в Supabase была создана таблица 'nodesrules' с полями, поддерживающими векторные данные, и настроены соответствующие функции или процедуры для поиска.\n\nПример использования: Этот узел можно использовать для поиска похожих документов или элементов на основе векторного представления, например, для рекомендации контента или поиска по семантическому сходству."
  },
  {
    "name": "Loop Over Items",
    "type": "n8n-nodes-base.splitInBatches",
    "typeVersion": 3,
    "position": [1420, 160],
    "parameters": {
      "options": {}
    },
    "description": "Узел Loop Over Items (или Split in Batches) предназначен для обработки больших наборов данных путем их разбиения на меньшие пакеты (batches). Это позволяет обрабатывать данные порциями, что полезно для снижения нагрузки на систему или для параллельной обработки.\n\nПараметры:\n\n1. **batchSize**: Определяет количество элементов в каждом пакете. По умолчанию может быть 1, что означает обработку по одному элементу за раз.\n\n2. **options**: Дополнительные настройки, такие как поведение при ошибках или настройки параллелизма. В данном случае оставлено пустым, что означает использование значений по умолчанию.\n\nЭтот узел часто используется в комбинации с другими узлами для итеративной обработки данных, например, для отправки запросов к API с ограничением на количество вызовов в минуту.\n\nПример использования: Если у вас есть список из 1000 элементов, и вы хотите обработать их по 10 за раз, вы можете задать batchSize = 10. Узел будет обрабатывать по 10 элементов в каждой итерации цикла."
  },
  {
    "name": "Webhook",
    "type": "n8n-nodes-base.webhook",
    "typeVersion": 2,
    "position": [500, -180],
    "parameters": {
      "httpMethod": "POST",
      "path": "43f8fe84-a3f3-48f3-add4-6cc3dedd9864",
      "responseMode": "responseNode",
      "options": {}
    },
    "description": "Узел Webhook позволяет запускать рабочий процесс в n8n через HTTP-запрос. Это полезно для интеграции с внешними сервисами, которые могут отправлять данные в n8n.\n\nПараметры:\n\n1. **httpMethod**: Определяет HTTP-метод, который будет использоваться для активации. В данном случае 'POST', что позволяет отправлять данные в теле запроса.\n\n2. **path**: Уникальный путь, по которому будет доступен вебхук. В примере это '43f8fe84-a3f3-48f3-add4-6cc3dedd9864', что является UUID для обеспечения уникальности.\n\n3. **responseMode**: Определяет, как n8n будет отвечать на запрос. Значение 'responseNode' означает, что ответ будет сформирован следующим узлом в рабочем процессе, например, узлом 'Respond to Webhook'.\n\n4. **options**: Дополнительные настройки, такие как аутентификация или заголовки. В данном случае пусто, что означает отсутствие дополнительных настроек.\n\nДля использования этого узла необходимо, чтобы внешний сервис отправлял POST-запрос на URL, сформированный из базового URL n8n и указанного пути.\n\nПример использования: Вы можете использовать этот узел для приема данных от веб-формы, уведомлений от других сервисов или для запуска рабочего процесса по расписанию через внешний планировщик."
  },
  {
    "name": "Respond to Webhook",
    "type": "n8n-nodes-base.respondToWebhook",
    "typeVersion": 1.1,
    "position": [660, -180],
    "parameters": {
      "options": {}
    },
    "description": "Узел Respond to Webhook используется для отправки ответа на входящий запрос, активировавший рабочий процесс через узел Webhook.\n\nПараметры:\n\n1. **responseCode**: Код состояния HTTP, который будет отправлен в ответе. По умолчанию 200 (OK).\n\n2. **responseData**: Данные, которые будут отправлены в теле ответа. Это может быть JSON, текст или другие форматы.\n\n3. **options**: Дополнительные настройки, такие как заголовки ответа. В данном случае пусто, что означает использование стандартных заголовков.\n\nЕсли этот узел не используется, n8n автоматически отправит ответ с кодом 200 и пустым телом. Однако, используя этот узел, вы можете настроить кастомный ответ, например, отправить данные, обработанные в рабочем процессе.\n\nПример использования: После обработки данных, полученных через вебхук, вы можете отправить подтверждение или результат обработки обратно отправителю."
  },
  {
    "name": "HTTP Request",
    "type": "n8n-nodes-base.httpRequest",
    "typeVersion": 4.2,
    "position": [1200, 160],
    "parameters": {
      "method": "POST",
      "url": "churka.com",
      "options": {}
    },
    "description": "Узел HTTP Request позволяет отправлять HTTP-запросы к внешним сервисам или API.\n\nПараметры:\n\n1. **method**: HTTP-метод, такой как GET, POST, PUT, DELETE и т.д. В данном случае 'POST' для отправки данных.\n\n2. **url**: Адрес, на который будет отправлен запрос. В примере это 'churka.com', но в реальном использовании это должен быть действительный URL.\n\n3. **options**: Дополнительные настройки, такие как заголовки, параметры запроса, тело запроса, аутентификация и т.д. В данном случае пусто, что означает, что запрос будет отправлен без дополнительных параметров.\n\nДля POST-запросов часто необходимо указать тело запроса, которое может быть в формате JSON, form-data и т.д. Это можно настроить в разделе 'options'.\n\nПример использования: Этот узел можно использовать для отправки данных на внешний сервер, например, для сохранения информации в базе данных или для вызова API стороннего сервиса."
  },
  {
    "name": "If",
    "type": "n8n-nodes-base.if",
    "typeVersion": 2.2,
    "position": [1520, -140],
    "parameters": {
      "conditions": {
        "options": {
          "caseSensitive": true,
          "leftValue": "",
          "typeValidation": "strict",
          "version": 2
        },
        "conditions": [
          {
            "id": "40b9277b-1890-4dfa-8b69-c8a1dba6f462",
            "leftValue": "31",
            "rightValue": "31",
            "operator": {
              "type": "string",
              "operation": "equals",
              "name": "filter.operator.equals"
            }
          }
        ],
        "combinator": "and"
      },
      "options": {}
    },
    "description": "Узел If позволяет выполнять условную логику в рабочем процессе, направляя поток данных по разным ветвям в зависимости от заданных условий.\n\nПараметры:\n\n1. **conditions**: Определяет условия, которые должны быть выполнены. В примере проверяется, равно ли значение '31' строке '31' с учетом регистра. Условия могут быть более сложными и включать несколько проверок.\n\n2. **combinator**: Определяет, как комбинируются условия. Значение 'and' означает, что все условия должны быть истинными. Другие варианты включают 'or'.\n\n3. **options**: Дополнительные настройки, такие как режим сравнения (строгий или нет). В данном случае пусто.\n\nУзел If имеет два выхода: 'true' и 'false'. Если условия выполняются, данные направляются по ветви 'true', иначе — по 'false'.\n\nПример использования: Вы можете использовать этот узел для фильтрации данных, например, обрабатывать только те записи, где определенное поле равно заданному значению."
  },
  {
    "name": "Switch",
    "type": "n8n-nodes-base.switch",
    "typeVersion": 3.2,
    "position": [1520, 20],
    "parameters": {
      "rules": {
        "values": [
          {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "leftValue": "={{ $json }}",
                  "rightValue": "31",
                  "operator": {
                    "type": "string",
                    "operation": "equals"
                  },
                  "id": "8db785db-e282-47d1-bdc3-83e97cdf28d3"
                }
              ],
              "combinator": "and"
            }
          },
          {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "db1f536d-56c6-4904-9e10-2a29b3d72cde",
                  "leftValue": "={{ $json }}",
                  "rightValue": "12",
                  "operator": {
                    "type": "string",
                    "operation": "equals",
                    "name": "filter.operator.equals"
                  }
                }
              ],
              "combinator": "and"
            }
          },
          {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "d21661be-63c8-43fa-ad84-98f484e3d3ed",
                  "leftValue": "={{ $json }}",
                  "rightValue": "1",
                  "operator": {
                    "type": "string",
                    "operation": "equals",
                    "name": "filter.operator.equals"
                  }
                }
              ],
              "combinator": "and"
            }
          }
        ]
      },
      "options": {}
    },
    "description": "Узел Switch позволяет направлять поток данных по одному из нескольких путей в зависимости от заданных условий. Это похоже на оператор switch в программировании.\n\nПараметры:\n\n1. **rules**: Определяет набор условий для каждого возможного пути. В примере есть три правила, каждое из которых проверяет, равно ли значение $json (вероятно, какое-то поле в данных) строкам '31', '12' или '1'.\n\n2. **options**: Дополнительные настройки, такие как поведение при несоответствии ни одному из условий. В данном случае пусто, что означает, что если ни одно условие не выполнено, данные не будут переданы ни по одному из путей.\n\nУзел Switch может иметь несколько выходов, каждый соответствующий одному из правил. Если данные соответствуют одному из условий, они направляются по соответствующему выходу.\n\nПример использования: Этот узел можно использовать для маршрутизации запросов в зависимости от типа операции или для обработки данных по разным сценариям в зависимости от их содержимого."
  },
  {
    "name": "Postgres",
    "type": "n8n-nodes-base.postgres",
    "typeVersion": 2.6,
    "position": [1520, -260],
    "parameters": {
      "operation": "executeQuery",
      "options": {}
    },
    "credentials": {
      "postgres": {
        "id": "KRErWdT7NdyZG9mY",
        "name": "Avainovator"
      }
    },
    "description": "Узел Postgres позволяет взаимодействовать с базой данных PostgreSQL, выполняя SQL-запросы.\n\nПараметры:\n\n1. **operation**: Определяет тип операции. Значение 'executeQuery' позволяет выполнить произвольный SQL-запрос. Другие операции могут включать 'insert', 'update', 'delete' с предопределенными шаблонами.\n\n2. **query**: (не указано в примере) Текст SQL-запроса, который будет выполнен. Для 'executeQuery' это обязательное поле.\n\n3. **options**: Дополнительные настройки, такие как параметры запроса или настройки подключения. В данном случае пусто.\n\nДля использования этого узла необходимо настроить учетные данные для подключения к базе данных PostgreSQL.\n\nПример использования: Вы можете использовать этот узел для извлечения данных из таблицы, обновления записей или выполнения сложных запросов с JOIN и агрегациями."
  },
  {
    "name": "Aggregate",
    "type": "n8n-nodes-base.aggregate",
    "typeVersion": 1,
    "position": [1040, 160],
    "parameters": {
      "fieldsToAggregate": {
        "fieldToAggregate": [
          {
            "fieldToAggregate": "data"
          }
        ]
      },
      "options": {}
    },
    "description": "Узел Aggregate позволяет агрегировать данные из нескольких элементов в один. Это полезно, когда нужно собрать данные из множества записей в единый объект.\n\nПараметры:\n\n1. **fieldsToAggregate**: Указывает поля, которые нужно агрегировать. В примере это поле 'data', что означает, что значения поля 'data' из всех входных элементов будут собраны в массив или другим способом объединены.\n\n2. **options**: Дополнительные настройки, такие как тип агрегации (например, объединение в массив, summing numeric values и т.д.). В данном случае пусто, что, вероятно, означает объединение в массив.\n\nПо умолчанию, если не указано иное, узел Aggregate собирает значения указанных полей во всех входных элементах и создает один выходной элемент с массивами этих значений.\n\nПример использования: Если у вас есть несколько элементов, каждый с полем 'data', содержащим число, вы можете агрегировать их, чтобы получить сумму всех чисел или список всех значений."
  },
  {
    "name": "Edit Fields",
    "type": "n8n-nodes-base.set",
    "typeVersion": 3.4,
    "position": [1240, -160],
    "parameters": {
      "assignments": {
        "assignments": [
          {
            "id": "760391bd-4942-4f63-a754-9b4117d6e95d",
            "name": "dada",
            "value": "dadad",
            "type": "string"
          }
        ]
      },
      "options": {}
    },
    "description": "Узел Edit Fields (или Set) позволяет добавлять, изменять или удалять поля в данных.\n\nПараметры:\n\n1. **assignments**: Определяет, какие поля нужно добавить или изменить. В примере добавляется поле 'dada' со значением 'dadad' типа string.\n\n2. **options**: Дополнительные настройки, такие как сохранение или удаление существующих полей. В данном случае пусто, что означает, что все существующие поля сохраняются, и добавляется новое поле.\n\nЭтот узел полезен для подготовки данных перед их отправкой или обработкой, например, для добавления метаданных или преобразования формата.\n\nПример использования: Вы можете использовать этот узел для добавления timestamp к данным или для преобразования названий полей в соответствии с требованиями API."
  },
  {
    "name": "Extract from File",
    "type": "n8n-nodes-base.extractFromFile",
    "typeVersion": 1,
    "position": [920, -180],
    "parameters": {
      "operation": "text",
      "options": {}
    },
    "description": "Узел Extract from File позволяет извлекать содержимое из файла, переданного в рабочем процессе.\n\nПараметры:\n\n1. **operation**: Определяет тип извлекаемых данных. Значение 'text' означает, что файл будет прочитан как текст.\n\n2. **options**: Дополнительные настройки, такие как кодировка файла. В данном случае пусто, что означает использование кодировки по умолчанию (обычно UTF-8).\n\nДля использования этого узла необходимо, чтобы предыдущий узел предоставил бинарные данные файла, например, через узел 'HTTP Request' или 'Read Binary File'.\n\nПример использования: Вы можете использовать этот узел для чтения содержимого текстового файла, полученного из внешнего источника, и дальнейшей обработки текста в рабочем процессе."
  },
  {
    "name": "Convert to File",
    "type": "n8n-nodes-base.convertToFile",
    "typeVersion": 1.1,
    "position": [1080, -180],
    "parameters": {
      "operation": "toText",
      "sourceProperty": "data",
      "options": {}
    },
    "description": "Узел Convert to File позволяет преобразовать данные из рабочего процесса в файл, который можно сохранить или передать далее.\n\nПараметры:\n\n1. **operation**: Определяет тип файла. Значение 'toText' означает создание текстового файла.\n\n2. **sourceProperty**: Указывает, какое свойство данных использовать для содержимого файла. В примере это 'data', что, вероятно, является полем в JSON-данных.\n\n3. **options**: Дополнительные настройки, такие как имя файла или MIME-тип. В данном случае пусто, что означает использование имени файла по умолчанию (например, 'file.txt').\n\nЭтот узел полезен для создания файлов на лету, например, для генерации отчетов или логов.\n\nПример использования: Вы можете использовать этот узел для создания CSV-файла из данных, полученных из базы данных, и последующей отправки файла по электронной почте."
  },
  {
    "name": "When clicking ‘Test workflow’",
    "type": "n8n-nodes-base.manualTrigger",
    "typeVersion": 1,
    "position": [340, -180],
    "parameters": {},
    "description": "Узел When clicking ‘Test workflow’ (или Manual Trigger) позволяет запускать рабочий процесс вручную из интерфейса n8n. Это полезно для тестирования и отладки рабочих процессов.\n\nПараметры: Отсутствуют. Этот узел не требует настройки, так как его единственная функция — инициировать выполнение при нажатии кнопки 'Test workflow'.\n\nПример использования: Вы можете использовать этот узел в начале рабочего процесса, который вы разрабатываете, чтобы тестировать его функциональность без необходимости настройки внешних триггеров, таких как вебхуки или расписания."
  },
  {
    "name": "Embeddings OpenAI",
    "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAI",
    "typeVersion": 1.2,
    "position": [680, 200],
    "parameters": {
      "options": {}
    },
    "credentials": {
      "openAiApi": {
        "id": "QzomCS3ZpbP3fzb8",
        "name": "OpenAi account"
      }
    },
    "description": "Узел Embeddings OpenAI позволяет генерировать векторные представления (embeddings) текста с помощью моделей OpenAI. Векторные представления — это числовые векторы, которые захватывают семантическое значение текста.\n\nПараметры:\n\n1. **model**: Определяет, какая модель OpenAI будет использоваться для генерации embeddings. По умолчанию может быть 'text-embedding-ada-002'.\n\n2. **options**: Дополнительные настройки, такие как batch size или другие параметры модели. В данном случае пусто, что означает использование значений по умолчанию.\n\nДля использования этого узла необходимо иметь учетные данные OpenAI API.\n\nПример использования: Вы можете использовать этот узел для преобразования текстовых данных в векторы, которые затем можно использовать для поиска по сходству, классификации или кластеризации текстов."
  },
  {
    "name": "Default Data Loader",
    "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
    "typeVersion": 1,
    "position": [820, -380],
    "parameters": {},
    "description": "Узел Default Data Loader используется в рабочих процессах LangChain для загрузки и подготовки данных. LangChain — это фреймворк для работы с языковыми моделями и цепочками обработки.\n\nПараметры: Отсутствуют. Этот узел автоматически загружает данные в формате JSON и подготавливает их для дальнейшей обработки в цепочке LangChain.\n\nПример использования: Вы можете использовать этот узел в начале цепочки LangChain для загрузки входных данных, которые затем будут переданы в другие узлы, такие как LLM или output parsers."
  },
  {
    "name": "When chat message received",
    "type": "@n8n/n8n-nodes-langchain.chatTrigger",
    "typeVersion": 1.1,
    "position": [1220, -320],
    "parameters": {
      "options": {}
    },
    "description": "Узел When chat message received (или Chat Trigger) позволяет запускать рабочий процесс при получении сообщения в чате n8n. Это полезно для создания интерактивных ботов или для обработки запросов пользователей в реальном времени.\n\nПараметры:\n\n1. **options**: Дополнительные настройки, такие как режим чата (публичный или приватный). В данном случае пусто, что означает использование режима по умолчанию (вероятно, приватный чат).\n\nДля использования этого узла необходимо, чтобы рабочий процесс был активирован и настроен для приема сообщений через чат n8n.\n\nПример использования: Вы можете использовать этот узел для создания чат-бота, который отвечает на вопросы пользователей или выполняет определенные действия на основе команд, полученных в чате."
  },
  {
    "name": "OpenAI Chat Model",
    "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
    "typeVersion": 1.2,
    "position": [220, 180],
    "parameters": {
      "model": {
        "__rl": true,
        "mode": "list",
        "value": "gpt-4o-mini"
      },
      "options": {}
    },
    "credentials": {
      "openAiApi": {
        "id": "QzomCS3ZpbP3fzb8",
        "name": "OpenAi account"
      }
    },
    "description": "Узел OpenAI Chat Model позволяет взаимодействовать с чат-моделями OpenAI, такими как GPT-3.5 или GPT-4, для генерации ответов в диалоговом режиме.\n\nПараметры:\n\n1. **model**: Определяет, какая модель OpenAI будет использоваться. В примере это 'gpt-4o-mini', что, вероятно, является вариантом модели GPT-4.\n\n2. **options**: Дополнительные настройки, такие как температура (temperature), максимальное количество токенов (maxTokens), топ-п (topP) и т.д. В данном случае пусто, что означает использование значений по умолчанию (например, temperature=0.7, maxTokens не ограничен).\n\nДля использования этого узла необходимо иметь учетные данные OpenAI API.\n\nПример использования: Вы можете использовать этот узел для создания чат-бота, который отвечает на вопросы пользователей, генерирует текст или выполняет другие задачи, связанные с обработкой естественного языка."
  },
  {
    "name": "Code",
    "type": "n8n-nodes-base.code",
    "typeVersion": 2,
    "position": [1040, 0],
    "parameters": {
      "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.myNewField = 1;\n}\n\nreturn $input.all();"
    },
    "description": "Узел Code позволяет выполнять произвольный JavaScript-код для обработки данных в рабочем процессе. Это дает большую гибкость для выполнения сложных операций, которые не поддерживаются стандартными узлами.\n\nПараметры:\n\n1. **jsCode**: Текст JavaScript-кода, который будет выполнен. В примере код перебирает все входные элементы, добавляет к каждому JSON-объекту поле 'myNewField' со значением 1 и возвращает обновленный массив.\n\nВ коде можно использовать специальные объекты и функции, предоставляемые n8n, такие как `$input` для доступа к входным данным, `$output` для формирования выходных данных, и другие.\n\nПример использования: Вы можете использовать этот узел для выполнения математических вычислений, преобразования данных, фильтрации или любых других операций, которые можно реализовать на JavaScript."
  },
  {
    "name": "Character Text Splitter",
    "type": "@n8n/n8n-nodes-langchain.textSplitterCharacterTextSplitter",
    "typeVersion": 1,
    "position": [600, -280],
    "parameters": {
      "separator": "----"
    },
    "description": "Узел Character Text Splitter используется для разбиения большого текста на меньшие фрагменты по заданному разделителю. Это полезно для обработки длинных документов или для подготовки текста к вводу в модели с ограничением на размер входных данных.\n\nПараметры:\n\n1. **separator**: Строка, по которой будет выполняться разбиение текста. В примере это '----'.\n\n2. **chunkSize**: (не указано в примере) Максимальный размер каждого фрагмента. По умолчанию может быть 1000 символов.\n\n3. **chunkOverlap**: (не указано в примере) Количество символов перекрытия между соседними фрагментами. По умолчанию может быть 200 символов.\n\nЭтот узел часто используется в цепочках обработки текста, например, перед генерацией embeddings или перед отправкой текста в LLM.\n\nПример использования: Если у вас есть большой текстовый документ, вы можете разбить его на параграфы или предложения, используя соответствующий разделитель, а затем обработать каждую часть отдельно."
  },
  {
    "name": "Split Out",
    "type": "n8n-nodes-base.splitOut",
    "typeVersion": 1,
    "position": [880, 160],
    "parameters": {
      "fieldToSplitOut": "data",
      "options": {}
    },
    "description": "Узел Split Out позволяет разделить массив, содержащийся в указанном поле, на отдельные элементы. Каждый элемент массива становится отдельным элементом в рабочем процессе.\n\nПараметры:\n\n1. **fieldToSplitOut**: Указывает поле, которое содержит массив для разделения. В примере это 'data'.\n\n2. **options**: Дополнительные настройки, такие как сохранение или удаление других полей. В данном случае пусто, что означает, что все остальные поля сохраняются в каждом новом элементе.\n\nНапример, если входной элемент имеет поле 'data': [1, 2, 3], узел Split Out создаст три отдельных элемента, каждый с 'data': 1, 'data': 2 и 'data': 3, соответственно, и всеми остальными полями, скопированными из оригинального элемента.\n\nПример использования: Вы можете использовать этот узел для обработки списков, полученных из API, где каждый элемент списка требует индивидуальной обработки."
  },
  {
    "name": "Structured Output Parser",
    "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
    "typeVersion": 1.2,
    "position": [400, 180],
    "parameters": {},
    "description": "Узел Structured Output Parser используется в цепочках LangChain для преобразования неструктурированного текстового ответа от языковой модели в структурированный формат, такой как JSON.\n\nПараметры: Отсутствуют. Узел использует предопределенную схему для парсинга ответа модели. Схема может быть задана в других узлах или в настройках цепочки.\n\nЭтот узел полезен, когда нужно извлечь конкретные данные из ответа модели, например, именованные сущности, ключевые слова или ответы в формате вопрос-ответ.\n\nПример использования: Если вы запрашиваете у модели информацию в определенном формате, например, 'Название: [название], Описание: [описание]', узел Structured Output Parser может распарсить ответ и предоставить данные в виде JSON-объекта с полями 'название' и 'описание'."
  }
]